//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 42 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `appBackground`.
    static let appBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "appBackground")
    /// Color `basicWhiteBlack`.
    static let basicWhiteBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "basicWhiteBlack")
    /// Color `black1`.
    static let black1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black1")
    /// Color `black2`.
    static let black2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black2")
    /// Color `black3`.
    static let black3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black3")
    /// Color `black`.
    static let black = Rswift.ColorResource(bundle: R.hostingBundle, name: "black")
    /// Color `cardShadow`.
    static let cardShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "cardShadow")
    /// Color `cardSubtitle`.
    static let cardSubtitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "cardSubtitle")
    /// Color `cardTitle`.
    static let cardTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "cardTitle")
    /// Color `caution`.
    static let caution = Rswift.ColorResource(bundle: R.hostingBundle, name: "caution")
    /// Color `collectionViewCellTitle`.
    static let collectionViewCellTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "collectionViewCellTitle")
    /// Color `faqTasksBase`.
    static let faqTasksBase = Rswift.ColorResource(bundle: R.hostingBundle, name: "faqTasksBase")
    /// Color `gray1`.
    static let gray1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray1")
    /// Color `gray2`.
    static let gray2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray2")
    /// Color `gray3`.
    static let gray3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray3")
    /// Color `heading`.
    static let heading = Rswift.ColorResource(bundle: R.hostingBundle, name: "heading")
    /// Color `placeholder`.
    static let placeholder = Rswift.ColorResource(bundle: R.hostingBundle, name: "placeholder")
    /// Color `primary400`.
    static let primary400 = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary400")
    /// Color `primary500`.
    static let primary500 = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary500")
    /// Color `primary800`.
    static let primary800 = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary800")
    /// Color `primaryHighlight`.
    static let primaryHighlight = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryHighlight")
    /// Color `primary`.
    static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary")
    /// Color `progressBarUnloaded`.
    static let progressBarUnloaded = Rswift.ColorResource(bundle: R.hostingBundle, name: "progressBarUnloaded")
    /// Color `redEmoji`.
    static let redEmoji = Rswift.ColorResource(bundle: R.hostingBundle, name: "redEmoji")
    /// Color `roundedCardIconPrimaryBcg`.
    static let roundedCardIconPrimaryBcg = Rswift.ColorResource(bundle: R.hostingBundle, name: "roundedCardIconPrimaryBcg")
    /// Color `roundedCardIconSecondaryBcg`.
    static let roundedCardIconSecondaryBcg = Rswift.ColorResource(bundle: R.hostingBundle, name: "roundedCardIconSecondaryBcg")
    /// Color `roundedCell`.
    static let roundedCell = Rswift.ColorResource(bundle: R.hostingBundle, name: "roundedCell")
    /// Color `roundedIconPrimaryBcg`.
    static let roundedIconPrimaryBcg = Rswift.ColorResource(bundle: R.hostingBundle, name: "roundedIconPrimaryBcg")
    /// Color `roundedIconPrimaryTint`.
    static let roundedIconPrimaryTint = Rswift.ColorResource(bundle: R.hostingBundle, name: "roundedIconPrimaryTint")
    /// Color `roundedIconSecondaryBcg`.
    static let roundedIconSecondaryBcg = Rswift.ColorResource(bundle: R.hostingBundle, name: "roundedIconSecondaryBcg")
    /// Color `roundedIconSecondaryTint`.
    static let roundedIconSecondaryTint = Rswift.ColorResource(bundle: R.hostingBundle, name: "roundedIconSecondaryTint")
    /// Color `searchBarBcg`.
    static let searchBarBcg = Rswift.ColorResource(bundle: R.hostingBundle, name: "searchBarBcg")
    /// Color `searchBarTint`.
    static let searchBarTint = Rswift.ColorResource(bundle: R.hostingBundle, name: "searchBarTint")
    /// Color `secondary400`.
    static let secondary400 = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondary400")
    /// Color `secondary500`.
    static let secondary500 = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondary500")
    /// Color `secondary800`.
    static let secondary800 = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondary800")
    /// Color `selectedCellBcg`.
    static let selectedCellBcg = Rswift.ColorResource(bundle: R.hostingBundle, name: "selectedCellBcg")
    /// Color `separator`.
    static let separator = Rswift.ColorResource(bundle: R.hostingBundle, name: "separator")
    /// Color `white1`.
    static let white1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "white1")
    /// Color `white2`.
    static let white2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "white2")
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "basicWhiteBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func basicWhiteBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.basicWhiteBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cardShadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cardShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cardShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cardSubtitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cardSubtitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cardSubtitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cardTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cardTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cardTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "caution", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func caution(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.caution, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "collectionViewCellTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func collectionViewCellTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.collectionViewCellTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "faqTasksBase", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func faqTasksBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.faqTasksBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "heading", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func heading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.heading, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "placeholder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary400", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary400, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary500", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary500(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary500, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary800", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary800(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary800, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryHighlight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryHighlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryHighlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "progressBarUnloaded", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func progressBarUnloaded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.progressBarUnloaded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "redEmoji", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redEmoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redEmoji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "roundedCardIconPrimaryBcg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func roundedCardIconPrimaryBcg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.roundedCardIconPrimaryBcg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "roundedCardIconSecondaryBcg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func roundedCardIconSecondaryBcg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.roundedCardIconSecondaryBcg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "roundedCell", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func roundedCell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.roundedCell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "roundedIconPrimaryBcg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func roundedIconPrimaryBcg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.roundedIconPrimaryBcg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "roundedIconPrimaryTint", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func roundedIconPrimaryTint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.roundedIconPrimaryTint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "roundedIconSecondaryBcg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func roundedIconSecondaryBcg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.roundedIconSecondaryBcg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "roundedIconSecondaryTint", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func roundedIconSecondaryTint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.roundedIconSecondaryTint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "searchBarBcg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func searchBarBcg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.searchBarBcg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "searchBarTint", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func searchBarTint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.searchBarTint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondary400", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondary400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondary400, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondary500", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondary500(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondary500, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondary800", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondary800(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondary800, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "selectedCellBcg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectedCellBcg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectedCellBcg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separator", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white2, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 127 images.
  struct image {
    /// Image `about-24px`.
    static let about24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-24px")
    /// Image `add_photo-24px`.
    static let add_photo24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_photo-24px")
    /// Image `alarm-24px`.
    static let alarm24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm-24px")
    /// Image `archive-24px`.
    static let archive24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "archive-24px")
    /// Image `attach_money-24px`.
    static let attach_money24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "attach_money-24px")
    /// Image `available_seats-24px`.
    static let available_seats24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "available_seats-24px")
    /// Image `ballot-24px`.
    static let ballot24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "ballot-24px")
    /// Image `barrier_free_entrance-24px`.
    static let barrier_free_entrance24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "barrier_free_entrance-24px")
    /// Image `building-24px`.
    static let building24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "building-24px")
    /// Image `cafeteria-24px`.
    static let cafeteria24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "cafeteria-24px")
    /// Image `calendar-24px`.
    static let calendar24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar-24px")
    /// Image `calendar_empty-24px`.
    static let calendar_empty24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar_empty-24px")
    /// Image `calendar_today-24px`.
    static let calendar_today24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar_today-24px")
    /// Image `camera-24px`.
    static let camera24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-24px")
    /// Image `canteens_akademie`.
    static let canteens_akademie = Rswift.ImageResource(bundle: R.hostingBundle, name: "canteens_akademie")
    /// Image `canteens_jak`.
    static let canteens_jak = Rswift.ImageResource(bundle: R.hostingBundle, name: "canteens_jak")
    /// Image `canteens_lednice`.
    static let canteens_lednice = Rswift.ImageResource(bundle: R.hostingBundle, name: "canteens_lednice")
    /// Image `canteens_o`.
    static let canteens_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "canteens_o")
    /// Image `canteens_pizzerie`.
    static let canteens_pizzerie = Rswift.ImageResource(bundle: R.hostingBundle, name: "canteens_pizzerie")
    /// Image `canteens_tak`.
    static let canteens_tak = Rswift.ImageResource(bundle: R.hostingBundle, name: "canteens_tak")
    /// Image `canteens_x`.
    static let canteens_x = Rswift.ImageResource(bundle: R.hostingBundle, name: "canteens_x")
    /// Image `checkmark-24px`.
    static let checkmark24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark-24px")
    /// Image `cloud-24px`.
    static let cloud24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud-24px")
    /// Image `coatroom-24px`.
    static let coatroom24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "coatroom-24px")
    /// Image `coffee-24px`.
    static let coffee24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "coffee-24px")
    /// Image `comment-24px`.
    static let comment24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment-24px")
    /// Image `commuting-24px`.
    static let commuting24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "commuting-24px")
    /// Image `corona-24px`.
    static let corona24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "corona-24px")
    /// Image `create_events`.
    static let create_events = Rswift.ImageResource(bundle: R.hostingBundle, name: "create_events")
    /// Image `credit_card-24px`.
    static let credit_card24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit_card-24px")
    /// Image `defence-24px`.
    static let defence24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "defence-24px")
    /// Image `detail_message-24px`.
    static let detail_message24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_message-24px")
    /// Image `detail_note-24px`.
    static let detail_note24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_note-24px")
    /// Image `detail_user-24px`.
    static let detail_user24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "detail_user-24px")
    /// Image `dismiss_cross-24px`.
    static let dismiss_cross24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "dismiss_cross-24px")
    /// Image `dormitory_hotel-24px`.
    static let dormitory_hotel24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "dormitory_hotel-24px")
    /// Image `download-24px`.
    static let download24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "download-24px")
    /// Image `elevator-24px`.
    static let elevator24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "elevator-24px")
    /// Image `email-24px`.
    static let email24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "email-24px")
    /// Image `emergency_floor-24px`.
    static let emergency_floor24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "emergency_floor-24px")
    /// Image `emergency_stairs-24px`.
    static let emergency_stairs24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "emergency_stairs-24px")
    /// Image `enrollment-24px`.
    static let enrollment24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "enrollment-24px")
    /// Image `entry_restriction-24px`.
    static let entry_restriction24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "entry_restriction-24px")
    /// Image `event_assignment-24px`.
    static let event_assignment24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "event_assignment-24px")
    /// Image `event_seat-24px`.
    static let event_seat24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "event_seat-24px")
    /// Image `exam-24px`.
    static let exam24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "exam-24px")
    /// Image `faculty-24px`.
    static let faculty24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "faculty-24px")
    /// Image `faq_favourite`.
    static let faq_favourite = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq_favourite")
    /// Image `female_toilet-24px`.
    static let female_toilet24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_toilet-24px")
    /// Image `flights-24px`.
    static let flights24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "flights-24px")
    /// Image `food_default-24px`.
    static let food_default24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_default-24px")
    /// Image `food_default_favourite-24px`.
    static let food_default_favourite24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_default_favourite-24px")
    /// Image `food_detail`.
    static let food_detail = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_detail")
    /// Image `food_machine-24px`.
    static let food_machine24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_machine-24px")
    /// Image `garage-24px`.
    static let garage24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "garage-24px")
    /// Image `garbage-24px`.
    static let garbage24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "garbage-24px")
    /// Image `garden-24px`.
    static let garden24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden-24px")
    /// Image `gate-24px`.
    static let gate24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "gate-24px")
    /// Image `gatehouse-24px`.
    static let gatehouse24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "gatehouse-24px")
    /// Image `good_manners_basics-24px`.
    static let good_manners_basics24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "good_manners_basics-24px")
    /// Image `gray_emoji-24px`.
    static let gray_emoji24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "gray_emoji-24px")
    /// Image `green_emoji-24px`.
    static let green_emoji24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "green_emoji-24px")
    /// Image `heart_filled-24px`.
    static let heart_filled24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_filled-24px")
    /// Image `heart_outlined-24px`.
    static let heart_outlined24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_outlined-24px")
    /// Image `home_location-24px`.
    static let home_location24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_location-24px")
    /// Image `kitchen-24px`.
    static let kitchen24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "kitchen-24px")
    /// Image `lecture-24px`.
    static let lecture24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "lecture-24px")
    /// Image `local_library-24px`.
    static let local_library24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "local_library-24px")
    /// Image `location_marker-24px`.
    static let location_marker24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_marker-24px")
    /// Image `locker-24px`.
    static let locker24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "locker-24px")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `male_toilet-24px`.
    static let male_toilet24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_toilet-24px")
    /// Image `map_default_circle-24px`.
    static let map_default_circle24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_default_circle-24px")
    /// Image `navigation-24px`.
    static let navigation24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation-24px")
    /// Image `no_events_left`.
    static let no_events_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_events_left")
    /// Image `no_events_today`.
    static let no_events_today = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_events_today")
    /// Image `notification_off-24px`.
    static let notification_off24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_off-24px")
    /// Image `notification_on-24px`.
    static let notification_on24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_on-24px")
    /// Image `office_boardroom-24px`.
    static let office_boardroom24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_boardroom-24px")
    /// Image `parking-24px`.
    static let parking24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "parking-24px")
    /// Image `pc_desktop-24px`.
    static let pc_desktop24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "pc_desktop-24px")
    /// Image `person_add-24px`.
    static let person_add24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "person_add-24px")
    /// Image `pizza-24px`.
    static let pizza24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "pizza-24px")
    /// Image `pizza_favourite-24px`.
    static let pizza_favourite24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "pizza_favourite-24px")
    /// Image `printer-24px`.
    static let printer24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "printer-24px")
    /// Image `projector-24px`.
    static let projector24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "projector-24px")
    /// Image `red_emoji-24px`.
    static let red_emoji24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "red_emoji-24px")
    /// Image `refresh-24px`.
    static let refresh24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh-24px")
    /// Image `report_delete_photo-24px`.
    static let report_delete_photo24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "report_delete_photo-24px")
    /// Image `report_issue-24px`.
    static let report_issue24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "report_issue-24px")
    /// Image `report_photos-24px`.
    static let report_photos24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "report_photos-24px")
    /// Image `school_university-24px`.
    static let school_university24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "school_university-24px")
    /// Image `seminar-24px`.
    static let seminar24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "seminar-24px")
    /// Image `settings-24px`.
    static let settings24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-24px")
    /// Image `short_order-24px`.
    static let short_order24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "short_order-24px")
    /// Image `short_order_favourite-24px`.
    static let short_order_favourite24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "short_order_favourite-24px")
    /// Image `sink-24px`.
    static let sink24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "sink-24px")
    /// Image `soup-24px`.
    static let soup24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "soup-24px")
    /// Image `soup_favourite-24px`.
    static let soup_favourite24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "soup_favourite-24px")
    /// Image `sport-24px`.
    static let sport24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "sport-24px")
    /// Image `stairs-24px`.
    static let stairs24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "stairs-24px")
    /// Image `star_filled-24px`.
    static let star_filled24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_filled-24px")
    /// Image `star_outlined-24px`.
    static let star_outlined24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_outlined-24px")
    /// Image `storage-24px`.
    static let storage24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "storage-24px")
    /// Image `study-24px`.
    static let study24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "study-24px")
    /// Image `sync_problem-24px`.
    static let sync_problem24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "sync_problem-24px")
    /// Image `sync_problem`.
    static let sync_problem = Rswift.ImageResource(bundle: R.hostingBundle, name: "sync_problem")
    /// Image `task_info-24px`.
    static let task_info24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "task_info-24px")
    /// Image `tasks-24px`.
    static let tasks24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "tasks-24px")
    /// Image `tasks_archived`.
    static let tasks_archived = Rswift.ImageResource(bundle: R.hostingBundle, name: "tasks_archived")
    /// Image `tasks`.
    static let tasks = Rswift.ImageResource(bundle: R.hostingBundle, name: "tasks")
    /// Image `telephone-24px`.
    static let telephone24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "telephone-24px")
    /// Image `temperature-24px`.
    static let temperature24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "temperature-24px")
    /// Image `test-24px`.
    static let test24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "test-24px")
    /// Image `thumb_down_filled-24px`.
    static let thumb_down_filled24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumb_down_filled-24px")
    /// Image `thumb_up_filled-24px`.
    static let thumb_up_filled24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumb_up_filled-24px")
    /// Image `thumb_up_outlined-24px`.
    static let thumb_up_outlined24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumb_up_outlined-24px")
    /// Image `ticket-24px`.
    static let ticket24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "ticket-24px")
    /// Image `time-24px`.
    static let time24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "time-24px")
    /// Image `timetable_other-24px`.
    static let timetable_other24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "timetable_other-24px")
    /// Image `transportation_stop-24px`.
    static let transportation_stop24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "transportation_stop-24px")
    /// Image `user-24px`.
    static let user24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-24px")
    /// Image `utility_room-24px`.
    static let utility_room24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "utility_room-24px")
    /// Image `water_machine-24px`.
    static let water_machine24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "water_machine-24px")
    /// Image `website-24px`.
    static let website24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "website-24px")
    /// Image `whiteboard-24px`.
    static let whiteboard24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "whiteboard-24px")
    /// Image `wifi-24px`.
    static let wifi24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "wifi-24px")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "about-24px", bundle: ..., traitCollection: ...)`
    static func about24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_photo-24px", bundle: ..., traitCollection: ...)`
    static func add_photo24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_photo24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alarm-24px", bundle: ..., traitCollection: ...)`
    static func alarm24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarm24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "archive-24px", bundle: ..., traitCollection: ...)`
    static func archive24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archive24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "attach_money-24px", bundle: ..., traitCollection: ...)`
    static func attach_money24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attach_money24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "available_seats-24px", bundle: ..., traitCollection: ...)`
    static func available_seats24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.available_seats24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ballot-24px", bundle: ..., traitCollection: ...)`
    static func ballot24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ballot24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "barrier_free_entrance-24px", bundle: ..., traitCollection: ...)`
    static func barrier_free_entrance24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barrier_free_entrance24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "building-24px", bundle: ..., traitCollection: ...)`
    static func building24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.building24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cafeteria-24px", bundle: ..., traitCollection: ...)`
    static func cafeteria24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cafeteria24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar-24px", bundle: ..., traitCollection: ...)`
    static func calendar24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar_empty-24px", bundle: ..., traitCollection: ...)`
    static func calendar_empty24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar_empty24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar_today-24px", bundle: ..., traitCollection: ...)`
    static func calendar_today24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar_today24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera-24px", bundle: ..., traitCollection: ...)`
    static func camera24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "canteens_akademie", bundle: ..., traitCollection: ...)`
    static func canteens_akademie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canteens_akademie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "canteens_jak", bundle: ..., traitCollection: ...)`
    static func canteens_jak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canteens_jak, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "canteens_lednice", bundle: ..., traitCollection: ...)`
    static func canteens_lednice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canteens_lednice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "canteens_o", bundle: ..., traitCollection: ...)`
    static func canteens_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canteens_o, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "canteens_pizzerie", bundle: ..., traitCollection: ...)`
    static func canteens_pizzerie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canteens_pizzerie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "canteens_tak", bundle: ..., traitCollection: ...)`
    static func canteens_tak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canteens_tak, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "canteens_x", bundle: ..., traitCollection: ...)`
    static func canteens_x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canteens_x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkmark-24px", bundle: ..., traitCollection: ...)`
    static func checkmark24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud-24px", bundle: ..., traitCollection: ...)`
    static func cloud24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coatroom-24px", bundle: ..., traitCollection: ...)`
    static func coatroom24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coatroom24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coffee-24px", bundle: ..., traitCollection: ...)`
    static func coffee24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coffee24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment-24px", bundle: ..., traitCollection: ...)`
    static func comment24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "commuting-24px", bundle: ..., traitCollection: ...)`
    static func commuting24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commuting24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corona-24px", bundle: ..., traitCollection: ...)`
    static func corona24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.corona24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "create_events", bundle: ..., traitCollection: ...)`
    static func create_events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.create_events, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit_card-24px", bundle: ..., traitCollection: ...)`
    static func credit_card24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credit_card24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "defence-24px", bundle: ..., traitCollection: ...)`
    static func defence24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defence24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail_message-24px", bundle: ..., traitCollection: ...)`
    static func detail_message24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_message24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail_note-24px", bundle: ..., traitCollection: ...)`
    static func detail_note24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_note24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "detail_user-24px", bundle: ..., traitCollection: ...)`
    static func detail_user24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detail_user24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dismiss_cross-24px", bundle: ..., traitCollection: ...)`
    static func dismiss_cross24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dismiss_cross24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dormitory_hotel-24px", bundle: ..., traitCollection: ...)`
    static func dormitory_hotel24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dormitory_hotel24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "download-24px", bundle: ..., traitCollection: ...)`
    static func download24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "elevator-24px", bundle: ..., traitCollection: ...)`
    static func elevator24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.elevator24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email-24px", bundle: ..., traitCollection: ...)`
    static func email24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emergency_floor-24px", bundle: ..., traitCollection: ...)`
    static func emergency_floor24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emergency_floor24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emergency_stairs-24px", bundle: ..., traitCollection: ...)`
    static func emergency_stairs24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emergency_stairs24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "enrollment-24px", bundle: ..., traitCollection: ...)`
    static func enrollment24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.enrollment24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "entry_restriction-24px", bundle: ..., traitCollection: ...)`
    static func entry_restriction24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entry_restriction24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "event_assignment-24px", bundle: ..., traitCollection: ...)`
    static func event_assignment24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.event_assignment24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "event_seat-24px", bundle: ..., traitCollection: ...)`
    static func event_seat24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.event_seat24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exam-24px", bundle: ..., traitCollection: ...)`
    static func exam24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exam24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faculty-24px", bundle: ..., traitCollection: ...)`
    static func faculty24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faculty24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq_favourite", bundle: ..., traitCollection: ...)`
    static func faq_favourite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq_favourite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_toilet-24px", bundle: ..., traitCollection: ...)`
    static func female_toilet24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_toilet24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flights-24px", bundle: ..., traitCollection: ...)`
    static func flights24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flights24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_default-24px", bundle: ..., traitCollection: ...)`
    static func food_default24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_default24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_default_favourite-24px", bundle: ..., traitCollection: ...)`
    static func food_default_favourite24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_default_favourite24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_detail", bundle: ..., traitCollection: ...)`
    static func food_detail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_detail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_machine-24px", bundle: ..., traitCollection: ...)`
    static func food_machine24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_machine24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garage-24px", bundle: ..., traitCollection: ...)`
    static func garage24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garage24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garbage-24px", bundle: ..., traitCollection: ...)`
    static func garbage24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garbage24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden-24px", bundle: ..., traitCollection: ...)`
    static func garden24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gate-24px", bundle: ..., traitCollection: ...)`
    static func gate24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gate24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gatehouse-24px", bundle: ..., traitCollection: ...)`
    static func gatehouse24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gatehouse24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "good_manners_basics-24px", bundle: ..., traitCollection: ...)`
    static func good_manners_basics24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.good_manners_basics24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gray_emoji-24px", bundle: ..., traitCollection: ...)`
    static func gray_emoji24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gray_emoji24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green_emoji-24px", bundle: ..., traitCollection: ...)`
    static func green_emoji24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green_emoji24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_filled-24px", bundle: ..., traitCollection: ...)`
    static func heart_filled24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_filled24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_outlined-24px", bundle: ..., traitCollection: ...)`
    static func heart_outlined24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_outlined24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_location-24px", bundle: ..., traitCollection: ...)`
    static func home_location24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_location24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kitchen-24px", bundle: ..., traitCollection: ...)`
    static func kitchen24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kitchen24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lecture-24px", bundle: ..., traitCollection: ...)`
    static func lecture24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lecture24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "local_library-24px", bundle: ..., traitCollection: ...)`
    static func local_library24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.local_library24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_marker-24px", bundle: ..., traitCollection: ...)`
    static func location_marker24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_marker24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locker-24px", bundle: ..., traitCollection: ...)`
    static func locker24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locker24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_toilet-24px", bundle: ..., traitCollection: ...)`
    static func male_toilet24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_toilet24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_default_circle-24px", bundle: ..., traitCollection: ...)`
    static func map_default_circle24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_default_circle24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation-24px", bundle: ..., traitCollection: ...)`
    static func navigation24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_events_left", bundle: ..., traitCollection: ...)`
    static func no_events_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_events_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_events_today", bundle: ..., traitCollection: ...)`
    static func no_events_today(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_events_today, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_off-24px", bundle: ..., traitCollection: ...)`
    static func notification_off24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_off24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_on-24px", bundle: ..., traitCollection: ...)`
    static func notification_on24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_on24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_boardroom-24px", bundle: ..., traitCollection: ...)`
    static func office_boardroom24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_boardroom24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "parking-24px", bundle: ..., traitCollection: ...)`
    static func parking24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parking24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pc_desktop-24px", bundle: ..., traitCollection: ...)`
    static func pc_desktop24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pc_desktop24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "person_add-24px", bundle: ..., traitCollection: ...)`
    static func person_add24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.person_add24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pizza-24px", bundle: ..., traitCollection: ...)`
    static func pizza24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pizza24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pizza_favourite-24px", bundle: ..., traitCollection: ...)`
    static func pizza_favourite24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pizza_favourite24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "printer-24px", bundle: ..., traitCollection: ...)`
    static func printer24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.printer24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "projector-24px", bundle: ..., traitCollection: ...)`
    static func projector24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projector24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "red_emoji-24px", bundle: ..., traitCollection: ...)`
    static func red_emoji24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.red_emoji24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh-24px", bundle: ..., traitCollection: ...)`
    static func refresh24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "report_delete_photo-24px", bundle: ..., traitCollection: ...)`
    static func report_delete_photo24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.report_delete_photo24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "report_issue-24px", bundle: ..., traitCollection: ...)`
    static func report_issue24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.report_issue24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "report_photos-24px", bundle: ..., traitCollection: ...)`
    static func report_photos24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.report_photos24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "school_university-24px", bundle: ..., traitCollection: ...)`
    static func school_university24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.school_university24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "seminar-24px", bundle: ..., traitCollection: ...)`
    static func seminar24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seminar24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-24px", bundle: ..., traitCollection: ...)`
    static func settings24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "short_order-24px", bundle: ..., traitCollection: ...)`
    static func short_order24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.short_order24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "short_order_favourite-24px", bundle: ..., traitCollection: ...)`
    static func short_order_favourite24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.short_order_favourite24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sink-24px", bundle: ..., traitCollection: ...)`
    static func sink24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sink24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "soup-24px", bundle: ..., traitCollection: ...)`
    static func soup24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soup24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "soup_favourite-24px", bundle: ..., traitCollection: ...)`
    static func soup_favourite24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soup_favourite24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sport-24px", bundle: ..., traitCollection: ...)`
    static func sport24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sport24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stairs-24px", bundle: ..., traitCollection: ...)`
    static func stairs24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stairs24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star_filled-24px", bundle: ..., traitCollection: ...)`
    static func star_filled24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_filled24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star_outlined-24px", bundle: ..., traitCollection: ...)`
    static func star_outlined24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_outlined24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storage-24px", bundle: ..., traitCollection: ...)`
    static func storage24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storage24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "study-24px", bundle: ..., traitCollection: ...)`
    static func study24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.study24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sync_problem", bundle: ..., traitCollection: ...)`
    static func sync_problem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sync_problem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sync_problem-24px", bundle: ..., traitCollection: ...)`
    static func sync_problem24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sync_problem24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "task_info-24px", bundle: ..., traitCollection: ...)`
    static func task_info24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.task_info24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tasks", bundle: ..., traitCollection: ...)`
    static func tasks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tasks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tasks-24px", bundle: ..., traitCollection: ...)`
    static func tasks24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tasks24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tasks_archived", bundle: ..., traitCollection: ...)`
    static func tasks_archived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tasks_archived, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "telephone-24px", bundle: ..., traitCollection: ...)`
    static func telephone24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.telephone24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temperature-24px", bundle: ..., traitCollection: ...)`
    static func temperature24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temperature24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "test-24px", bundle: ..., traitCollection: ...)`
    static func test24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumb_down_filled-24px", bundle: ..., traitCollection: ...)`
    static func thumb_down_filled24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumb_down_filled24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumb_up_filled-24px", bundle: ..., traitCollection: ...)`
    static func thumb_up_filled24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumb_up_filled24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumb_up_outlined-24px", bundle: ..., traitCollection: ...)`
    static func thumb_up_outlined24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumb_up_outlined24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ticket-24px", bundle: ..., traitCollection: ...)`
    static func ticket24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ticket24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time-24px", bundle: ..., traitCollection: ...)`
    static func time24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "timetable_other-24px", bundle: ..., traitCollection: ...)`
    static func timetable_other24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timetable_other24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transportation_stop-24px", bundle: ..., traitCollection: ...)`
    static func transportation_stop24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transportation_stop24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-24px", bundle: ..., traitCollection: ...)`
    static func user24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "utility_room-24px", bundle: ..., traitCollection: ...)`
    static func utility_room24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.utility_room24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "water_machine-24px", bundle: ..., traitCollection: ...)`
    static func water_machine24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.water_machine24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "website-24px", bundle: ..., traitCollection: ...)`
    static func website24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.website24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whiteboard-24px", bundle: ..., traitCollection: ...)`
    static func whiteboard24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteboard24px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wifi-24px", bundle: ..., traitCollection: ...)`
    static func wifi24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wifi24px, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
